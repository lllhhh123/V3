<!-- <template>
     <div v-if="a == 'A'">
    A
    </div>
<div v-else-if="a == 'B'">
    B
</div>
<div v-else>
    C
</div> -->
    <!-- v-on 可以被@代替，效果一样-->
    <!-- <div @click="parent">
    <button @[event].stop="xxx">点击</button>
  </div> -->

    <!-- <div class="c" :class="[Cls ? 'a' : 'b']">  v-bind 一般会简写为 :  支持动态也支持静态 -->
    <!-- 演示v-bind -->
    <!-- </div> -->
    <!-- <div>
        <input v-model="a" type="text">
        <div>{{ a }}</div>
    </div> -->
    <div>
        <div v-for="(item,index) in arr"> <!-- item 就是数组中的每一项,index就是索引-->
            <!-- 
                v-once 性能优化只渲染一次
                v-memo 性能优化会有缓存
            -->>
           {{ index }} - {{ item }}
        </div>
    </div>
</template> -->
<!-- 
<script setup lang="ts">
const arr:string[] =['a','x','q']
// import { ref } from 'vue'  //把一个值变成响应式
// const a = ref('a')

// const a:string = 'D'
// const event = 'click'
// const parent = ()=>{
//     console.log('父级');
// }
// const xxx =() =>{
//     console.log('abc');
// }
// const id:string = '123'
// const Cls:boolean = false
// const style = {
//     color:'red',
//     border:'1px soild #ccc'
// }



</script> -->



<!-- <style>
.a {
    color: red;
}

.b {
    border: 1px solid #ccc;
}

.c {
    background-color: aqua;
}
</style> -->










<template>
    <div>
        {{ Man }}
    </div>
    <hr>
    <div>
        customRef:{{ obj }}
    </div>
    <hr>


    <div ref="dom">我是dom</div>


    <button @click="change">修改</button>
</template>
<script setup lang = "ts">
import { ref, isRef, shallowRef, triggerRef, customRef } from 'vue'



const dom = ref<HTMLDivElement>()



const Man = ref({ name: "man" })
const change = () => {
    // console.log(isRef(Man));
    obj.value = 'customRef 修改了'
    console.log(dom.value?.innerText);
}

function MyRef<T>(value: T) {
    let timer: any
    return customRef((track, trigger) => {
        return {
            get() {
                track()
                return value
            },
            set(newVal) {
                clearTimeout(timer)
                timer = setTimeout(() => {
                    console.log('chufale');
                    value = newVal
                    timer = null;
                    trigger()

                },500)

            }
        }
    }

    )
}
const obj = MyRef<string>('customRef-abc')
</script>


<style scoped></style>




<template>
    <div>
        <!-- <ul>
            <li v-for="item in list.arr">{{ item }}</li>
        </ul>
        <button @click="add">添加</button> -->
        <div>
            {{ obj }}
        </div>
        <div>
            {{ obj2 }}
        </div>
        <button @click="edit">修改</button>
    </div>
</template>

<script setup lang="ts">
import { ref, reactive, readonly, shallowReactive } from "vue";
// readonly只能读取不能改变值，但是可以在外部直接改变obj的值
// shallowReactive只能浅层影响，不能修改页面上的值
// shallowReactive也会被reactive影响
let obj = reactive({ name: 'abc' })

const obj2: any = shallowReactive({
    foo: {
        bar: {
            num: 1
        }
    }
})

const edit = () => {
    obj.name = 'asd'
    obj2.foo.bar.num = 456
    console.log(obj2);


}

// ref reactive
// ref支持所有的类型 reactive 只支持引用类型 OBJ Array map set
// ref 取值和赋值都需要。value  reactive是不需要.value的
// reactive是proxy代理的 不能直接复制，否则会破坏响应式对象
// 解决方法 1.数组可以使用push加解构 2.添加一个对象把数组作为一个属性取解决
/*
    let list = reactive<{
    arr:string[]
}>({
    arr:[]
})

const add = () => {
    setTimeout(()=>{
        let res = ['EDG','RNG','JDG']
        list.arr = res;
        console.log(list);
        
    },2000)
}
*/



</script>

<style scoped ></style>



<template>
  <div >
    {{ man }}
  </div>
  <hr>
  <!-- <div>
    toRef:{{ like }}
  </div> -->
  <!-- {{ name }}--{{ age }}--{{ like }} -->
  <div>
    <button @click="change">修改</button>
  </div>
</template>


<script setup lang="ts">
import { toRef,reactive,toRefs,toRaw } from 'vue'
// toref 只能修改响应式对象的值，非响应式对象视图毫无变化
const man = reactive({name:"abc",age:15.5,like:'jk'})
// const like = toRef(man,'like')
// let {name,age,like} = toRefs(man)
const change = ()=>{
    // // man.like = 'luoli'
    // like.value = '洛丽塔'
    // console.log(like);

    // name.value = 'abcd'
    // age.value = 18
    // console.log(name,age,like);
    
    console.log(man,toRaw(man));
    
}

</script>


<style scoped> 
* {
    padding: 0;
    margin: 0;
}
</style>









<template>
  <div >
    <input v-model="fistName" type="text">
    <input v-model="lastName" type="text">
  </div>
  <div>
    {{ name }}
  </div>
</template>

<script setup lang="ts">
import {computed,ref} from 'vue'
let fistName = ref('')
let lastName = ref('')
// const name = computed(()=>{
//   return fistName.value + '----' + lastName.value
// })
// const name = computed({
//   get(){
//     return fistName.value + lastName.value
//   },
  
//   set(){
//     fistName.value + lastName.value
//   }
  
// })
</script>
<style scoped>
</style>





<template>
  <div>
    <table border style="width:800px">
      <thead>
        <tr>
          <th>名称</th>
          <th>数量</th>
          <th>价格</th>
          <th>操作</th>
        </tr>
      </thead>
      <tbody>
        <tr :key="index" v-for="(item, index) in data">
          <td align="center">{{ item.name }}</td>
          <td align="center">
            <button @click="AddAndSub(item, false)">-</button>
            {{ item.num }}
            <button @click="AddAndSub(item, true)">+</button>
          </td>
          <td align="center">{{ item.num * item.price }}</td>
          <td align="center">
            <button @click="del(index)">删除</button>
          </td>
        </tr>
      </tbody>

      <tfoot>
        <td></td>
        <td></td>
        <td></td>
        <td align="center">总价:{{ $total }}</td>
      </tfoot>
    </table>
  </div>
</template>

<script setup lang="ts">
import { reactive, ref, computed } from 'vue';
type Shop = {
  name: string,
  num: number,
  price: number
}
let $total = ref(0)
const data = reactive([
  {
    name: 'asd',
    num: 1,
    price: 100
  },
  {
    name: 'abc',
    num: 1,
    price: 200
  },
  {
    name: 'asdf',
    num: 1,
    price: 300
  },
])
const AddAndSub = (item: Shop, type: boolean): void => {
  if (item.num > 1 && !type) {
    item.num--
  }
  if (item.num < 99 && type) {
    item.num++
  }
}
const del = (index: number) => {
  data.splice(index, 1)
}

$total = computed<number>(() => {
  return data.reduce((prev, next) => {
    return prev + (next.num * next.price)
  }, 0)
})
</script>

<style scoped></style>


<template>
  <div>
    case1:<input v-model="message.foo.bar.name" type="text">
    <hr>
    case1:<input v-model="message.foo.bar.age" type="text">
  </div>
</template>

<script setup lang="ts">
import { ref, reactive, watch } from 'vue'

let message = reactive({
  foo:{
    bar:{
      name:"abcdefg",
      age:'123'
    }
  }
})

  watch(()=>message.foo.bar.name,(newVal,oldVal)=>{
    console.log(newVal,oldVal);
  },
  
  {
    // deep:true  //深度监听
    immediate:true, //立即执行一次
    flush:"pre" //flush 控制watch执行的一个顺序，有三个值 pre 组件更新之前调用，sync同步执行 post组件更新之后执行
  })

</script>
<style scoped lang='less'></style>










<template>
  <div>
    <input id = "ipt" v-model="message" type="text" />

    <input v-model="message2" type="text" />
    <button @click="stopWatch">停止监听</button>
  </div>
</template>

<script setup lang="ts">
import { ref, watchEffect } from 'vue';

let message = ref<string>('飞机')
let message2 = ref<string>('飞机杯')
const stop = watchEffect((oninvalidate)=>{
  let ipt:HTMLInputElement = document.querySelector('#ipt') as HTMLInputElement
  // console.log('message====>',message.value);
  // console.log('message2====>',message2.value);
  console.log(ipt,'ellllll');
  
  oninvalidate(()=>{
    console.log('before');
  })
},{
  flush:"post",
  onTrigger(){
    
  }
})
const stopWatch = ()=>stop()
</script>

<style scoped lang='less'></style>


<template>
  <div></div>
  <HelloWorld> </HelloWorld>
</template>

<script setup>
import { ref, reactive } from 'vue'
import HelloWorld from "./components/HelloWorld.vue";

</script>

<style scoped lang='less'></style>